---
- name: Prepare server monitoring
  hosts: front, back
  vars:
    #- ansible_host_ip: "192.168.56.5"
    - mysql_root_password: myrootpw
  vars_files:
    -  staff/vars      
  handlers: 
    - name: SSHD RELOAD  
      service:
        name: sshd 
        state: reloaded
    
    - name: BORG SERVICE
      service:
        name: borg-backup.service 
        state: restarted
        enabled: yes   

    - name: CHRONYD RESTART
      service:
        name: chronyd 
        state: restarted
    
    - name: RSYSLOG RESTART 
      service:
        name: rsyslog 
        state: restarted
        enabled: yes    
    
    - name: RESTART SERVICE ZABBIX
      service:
        name: zabbix-agent
        state: restarted  
    - name: RESTART FIREWALLD
      service:
       name: firewalld
       state: restarted             
  tasks:
  - name: Open ssh perminition
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^\s*.?\s*PasswordAuthentication no'
      line: 'PasswordAuthentication yes'
    notify: SSHD RELOAD 
 

  - name: Chronyd configure
    timezone:
      name: 'Asia/Vladivostok' 
    notify: CHRONYD RESTART 

  - name: Add dns
    lineinfile:
      path: /etc/hosts
      regexp: '\s*{{ansible_host_ip}}\s*gallery.local.com'
      line: '{{ansible_host_ip}} gallery.local.com'

  - name: add crontab task    
    lineinfile:
      path: /etc/crontab
      regexp: '.*root\s+rsync\s+-rapv\s+\/opt\/gallery3\/gallery-var'
      line: '*/1 * * * * root rsync -rapv /opt/gallery3/gallery-var root@192.168.56.10:/opt/gallery3/'
    when: (ansible_hostname == "front")  
  
  - name: add repo zabbix
    copy:
      dest: /etc/yum.repos.d/zabbix.repo
      content: |
          [smb-local-zabbix50]
          name=Samberi Local - Zabbix 5.0 $releasever
          baseurl=https://repo.zabbix.com/zabbix/5.0/rhel/$releasever/$basearch/
          enabled=1
          gpgcheck=0 

  - name: Add docker repo 
    copy:
      src: staff/docker.repo  
      dest: /etc/yum.repos.d/docker-ce.repo
      owner: root
      group: root
      mode: 0644

  - name: Install syslog soft
    yum: 
      name: '{{item}}'
      state: present
      update_cache: yes
    loop:
      - epel-release, vim, git, zabbix-agent, wget, MySQL-python
      - borgbackup 
      - docker-ce, docker-ce-cli, containerd.io, docker-buildx-plugin, docker-compose-plugin 

  - name: Docker start
    service:
      name: "{{item}}"
      state:  started
      enabled: yes
    loop: 
      - firewalld  
      - docker

  - name: Create borg user
    user:
      name: borg
      state: present
      append: yes
      groups: sshd

  - name: Borg ssh directory
    file:
      dest: /root/.ssh/
      owner: root
      group: root
      state: directory
      mode: 0700 

  - name: Copy configure file ssh
    ansible.builtin.template:
      src: staff/ssh.conf
      dest: /root/.ssh/config
      owner: root
      group: root
    when: (ansible_hostname == "front")

  - name: Generate keypair 
    ansible.builtin.openssh_keypair:
      path: /root/.ssh/id_ssh_rsa
      owner: root
      group: root
    when: (ansible_hostname == "front")
  
  - name: COPY /root/.ssh/id_ssh_rsa
    fetch:
      src: /root/.ssh/id_ssh_rsa.pub
      dest: ./staff/id_ssh_rsa_root  
      flat: yes
    when: (ansible_hostname == "front")

  - name: Borg ssh keypair
    copy:
      src: ./staff/id_ssh_rsa_borg
      dest: /root/.ssh/id_rsa        
      owner: root
      group: root
      mode: 0600

  - name: Root ssh keypair
    copy:
      src: ./staff/id_ssh_rsa_root
      dest: /root/.ssh/authorized_keys       
      owner: root
      group: root
      mode: 0600
    when: (ansible_hostname == "back")

  - name:  Add keypair known host
    shell: 'ssh-keyscan -H {{item}} >> /root/.ssh/known_hosts'
    loop:
      - '192.168.56.20'
      - '192.168.56.10'

  - name: Initialisation backup 
    shell: "{{item}}"
    loop:
      -  'borg init --encryption=none borg@192.168.56.20:application-{{ansible_hostname}}'
    ignore_errors: yes 

  - name: Create unit backup
    copy:
     dest:  /etc/systemd/system/borg-backup.service
     content: |
      [Unit]
      Description=Borg Backup

      [Service]
      Type=oneshot

      # Парольная фраза
      Environment="BORG_PASSPHRASE="
      # Репозиторий
      Environment=REPO=borg@192.168.56.20:
     
      # Создание бэкапа
      ExecStart=/bin/borg create  -C zstd ${REPO}application-{{ansible_hostname}}::application-{now:%%Y-%%m-%%d_%%H:%%M:%%S} /etc /opt/
    
    notify: BORG SERVICE

  - name: Create unit timer
    copy:
     dest:  /etc/systemd/system/borg-backup.timer
     content: |
      [Unit]
      Description=Borg Backup

      [Timer]
      OnUnitActiveSec=5min

      [Install]
      WantedBy=timers.target
    notify: BORG SERVICE
  
  - name: Backup not encrypt repo accept
    shell: 'yes | borg list borg@192.168.56.20:application-{{ansible_hostname}} '

  - name:  Enabled timer for backup
    service:
      name: borg-backup.timer
      state: started
      enabled: yes
  
  - name: Borg rsyslog remote conf
    copy:
      dest: /etc/rsyslog.d/{{ansible_hostname}}.conf
      content: |
        *.* @@192.168.56.15:514
      owner: root
      group: root
      mode: 0644
    notify: RSYSLOG RESTART

  - name: ZABBIX CONF
    template:
      src: staff/zabbix_template.j2
      dest: "/etc/zabbix/zabbix_agentd.conf"
    notify: RESTART SERVICE ZABBIX
  
  - name: START ZABBIX
    service: 
      name: zabbix-agent 
      state: started 
      enabled: yes
  - name: GET SERVICES STATUS (for firewalld)
    systemd:
      name: firewalld
    register: firewalld_status

  - name: OPEN ZABBIX PORT
    firewalld:
      port: 10050/tcp
      permanent: yes
      state: enabled
    when: firewalld_status.status.ActiveState == "active"
    notify: RESTART FIREWALLD  


#######SQL REPLICATION MASTER####################################
 
  - name: Copy git repository galery 
    ansible.builtin.copy:
      src: staff/gallery3
      dest: /opt
  
  - name: Create configuration for replication and docker compose
    ansible.builtin.template:
      src: "{{item.src}}"
      dest:  "{{item.dest}}"
    loop:
      - { src: staff/master.cnf, dest: /opt/gallery3/master.cnf }
      - { src: staff/docker-compose.yml , dest: /opt/gallery3/docker-compose.yml}

  - name: docker compose up
    shell: 'cd /opt/gallery3 && docker compose -p gallery3 up -d'
  
  - name: sleep 10
    shell: sleep 10

  - name: create user in db
    ansible.builtin.mysql_user:
      name: replication
      host: '%' 
      login_user: root
      login_password: "myrootpw"
      login_host: 192.168.56.5
      priv: "*.*:REPLICATION SLAVE"
      state: present  
    when: (ansible_hostname == "front")    

  - name: get log position
    shell: docker exec -it gallery3-mysql-1 mysql -uroot -p"{{ mysql_root_password }}" -e "SHOW MASTER STATUS;" | grep "bin" | awk '{print ${{item}}}'
    loop: 
      - 4
      - 2
    register: log_pos
    when: (ansible_hostname == "front")

  - name: create vars files
    copy:
      dest: vars
      content: |
        log_position: "{{log_pos.results[0].stdout}}"
        log_master: "{{log_pos.results[1].stdout}}"
    when: (ansible_hostname == "front")

  - name: fetch vars log_pos
    fetch:
      src: vars
      dest: staff/vars
      flat:  yes
    when: (ansible_hostname == "front")  

  - debug:
      var: log_master, log_position  

  - name: Slave replication
    shell: docker exec -it gallery3-mysql-1 mysql -uroot -p"{{ mysql_root_password }}" -e  "{{item}}"
    loop: 
    - "CHANGE MASTER TO MASTER_HOST='192.168.56.5', MASTER_USER='replication', MASTER_LOG_FILE='{{log_master | default('')}}', MASTER_LOG_POS={{log_position}};"
    - "START SLAVE;"
    when: (ansible_hostname == "back")
  